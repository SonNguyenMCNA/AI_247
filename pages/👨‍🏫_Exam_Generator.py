import streamlit as st
from io import BytesIO
from base import request_gpt
import PyPDF2

st.set_page_config(
    page_title="Exam Generator", 
    page_icon="ü§ñ",
)

st.write("# Exam Generator üë®‚Äçüè´")

language = st.selectbox(
    "Choose language:",
    ("English", "Ti·∫øng Vi·ªát"),
    index=None
)

if not language:
    st.stop()

if language == "English":
    uploaded_file = st.file_uploader("Upload file")

    if not uploaded_file:
        st.stop()

    num_question = st.text_input("Choose number of questions:")

    if not num_question:
        st.stop()

    question_type = st.selectbox(
        "Choose question type:",
        ("Multiple choice", "True/False", "Fill in the blank"),
        index=None
        )

    if not question_type:
        st.stop()

    difficulty = st.selectbox(
        "Choose difficulty level:",
        ("Easy", "Medium", "Hard"),
        index=None
        )

    if not difficulty:
        st.stop()

    limit = st.selectbox(
        "Limit the content in the file?",
        ('Yes', 'No'),
        index=None
    )

    if not limit:
        st.stop()

    prompt = f"From the input file, generate a test with {num_question} questions of type {question_type} with difficulty level {difficulty}."

    if limit == 'Yes':
        limit_type = st.selectbox(
            "Choose how to limit content:",
            ('By Page Range', 'By Chapters'),
            index=None
        )

        if not limit_type:
            st.stop()

        if limit_type == 'By Page Range':
            pdfReader = PyPDF2.PdfFileReader(BytesIO(uploaded_file.read()))
            num_pages = pdfReader.getNumPages()

            limit_range = st.slider("Choose the page range of the file:", 1, num_pages, (1, num_pages))
            st.markdown(f"Content range: {limit_range[0]} - {limit_range[1]}")
            extra_prompt = f" Limit the content in the file from page {limit_range[0]} to page {limit_range[1]}."

        elif limit_type == 'By Chapters':
            chapters = st.text_area("Enter the chapter numbers or titles")
            if not chapters:
                st.warning("Please enter at least one chapter number or title.")
                st.stop()
            extra_prompt = f" Limit the content to chapter {chapters} in the file."


        prompt = prompt + extra_prompt

    prompt = prompt + " At the end of the test, add a new section to provide the correct answer and detailed explanation for each question. Also refer to the page number in the file for each question and quote the relevant text."

    # st.markdown(prompt)

    if st.button("Generate Exam"):
        print(prompt)
        request_gpt(uploaded_file, prompt, "test")
        

elif language == "Ti·∫øng Vi·ªát":
    uploaded_file = st.file_uploader("T·∫£i l√™n t·ªáp") 

    if not uploaded_file:
        st.stop()

    num_question = st.text_input("ƒêi·ªÅn s·ªë l∆∞·ª£ng c√¢u h·ªèi:")

    if not num_question:
        st.stop()

    question_type = st.selectbox(
        "Ch·ªçn lo·∫°i c√¢u h·ªèi:",
        ("Tr·∫Øc nghi·ªám", "ƒê√∫ng/Sai", "ƒêi·ªÅn t·ª´ v√†o ch·ªó tr·ªëng"),
        index=None
        )

    if not question_type:
        st.stop()

    difficulty = st.selectbox(
        "Ch·ªçn m·ª©c ƒë·ªô kh√≥:",
        ("D·ªÖ", "Trung b√¨nh", "Kh√≥"),
        index=None
        )

    if not difficulty:
        st.stop()

    limit = st.selectbox(
        "Gi·ªõi h·∫°n n·ªôi dung trong t·ªáp?",
        ('C√≥', 'Kh√¥ng'),
        index=None
    )

    if not limit:
        st.stop()
    

    prompt = f"T·ª´ t·ªáp ƒë·∫ßu v√†o, t·∫°o b√†i ki·ªÉm tra v·ªõi {num_question} c√¢u h·ªèi lo·∫°i {question_type} v·ªõi m·ª©c ƒë·ªô {difficulty}."

    if limit == 'C√≥':
        limit_type = st.selectbox(
            "Ch·ªçn c√°ch gi·ªõi h·∫°n n·ªôi dung:",
            ('Theo Ph·∫°m Vi Trang', 'Theo Ch∆∞∆°ng'),
            index=None
        )

        if not limit_type:
            st.stop()

        if limit_type == 'Theo Ph·∫°m Vi Trang':
            pdfReader = PyPDF2.PdfFileReader(BytesIO(uploaded_file.read()))
            num_pages = pdfReader.getNumPages()

            limit_range = st.slider("Ch·ªçn kho·∫£ng trang c·∫ßn gi·ªõi h·∫°n trong t·ªáp:", 1, num_pages, (1, num_pages))
            st.markdown(f"Trang: {limit_range[0]} - {limit_range[1]}")
            extra_prompt = f" Gi·ªõi h·∫°n n·ªôi dung trong t·ªáp t·ª´ trang {limit_range[0]} ƒë·∫øn trang {limit_range[1]}."

        elif limit_type == 'Theo Ch∆∞∆°ng':
            chapters = st.text_area("Nh·∫≠p s·ªë ch∆∞∆°ng ho·∫∑c ti√™u ƒë·ªÅ")
            if not chapters:
                st.warning("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt s·ªë ch∆∞∆°ng ho·∫∑c ti√™u ƒë·ªÅ.")
                st.stop()
            extra_prompt = f" Gi·ªõi h·∫°n n·ªôi dung trong t·ªáp ·ªü ch∆∞∆°ng {chapters}."

        prompt = prompt + extra_prompt
    prompt = prompt + " Cu·ªëi b√†i ki·ªÉm tra, th√™m m·ªôt ph·∫ßn m·ªõi ƒë·ªÉ cung c·∫•p c√¢u tr·∫£ l·ªùi ƒë√∫ng v√† gi·∫£i th√≠ch chi ti·∫øt cho m·ªói c√¢u h·ªèi. Tr√≠ch d·∫´n s·ªë trang trong t·ªáp cho m·ªói c√¢u h·ªèi v√† tr√≠ch d·∫´n vƒÉn b·∫£n, n·ªôi dung li√™n quan."
    # st.markdown(prompt)

    if st.button("T·∫°o b√†i ki·ªÉm tra"):
        print(prompt)
        request_gpt(uploaded_file, prompt, "test")
        