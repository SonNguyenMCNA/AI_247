import streamlit as st
from io import BytesIO
from base import request_gpt
import PyPDF2

st.set_page_config(
    page_title="Exam Generator", 
    page_icon="ü§ñ",
)

st.write("# Exam Generator üë®‚Äçüè´")

language = st.selectbox(
    "Choose language:",
    ("English", "Ti·∫øng Vi·ªát"),
    index=None
)

if not language:
    st.stop()

if language == "English":
    uploaded_file = st.file_uploader("Upload file", accept_multiple_files=True)

    if not uploaded_file:
        st.stop()

    num_question = st.text_input("Choose number of questions:")

    if not num_question:
        st.stop()

    question_type = st.selectbox(
        "Choose question type:",
        ("Multiple choice", "True/False", "Fill in the blank"),
        index=None
        )

    if not question_type:
        st.stop()

    difficulty = st.selectbox(
        "Choose difficulty level:",
        ("Easy", "Medium", "Hard"),
        index=None
        )

    if not difficulty:
        st.stop()

    prompt = f"From the input file, generate a test with {num_question} questions of type {question_type} with difficulty level {difficulty}."

    prompt = prompt + " At the end of the test, add a new section to provide the correct answer and detailed explanation for each question. Also refer to the page number in the file for each question and quote the relevant text."

    model_ai = st.selectbox(
        "Choose a model:",
        ("gpt-4o-mini", "gpt-3.5-turbo"),
        index=None
    )

    if not model_ai:
        st.stop()

    # st.markdown(prompt)

    if st.button("Generate Exam"):
        print(prompt)
        request_gpt(uploaded_file, prompt, "test", model_ai)
        

elif language == "Ti·∫øng Vi·ªát":
    uploaded_file = st.file_uploader("T·∫£i l√™n t·ªáp", accept_multiple_files=True) 

    if not uploaded_file:
        st.stop()

    num_question = st.text_input("ƒêi·ªÅn s·ªë l∆∞·ª£ng c√¢u h·ªèi:")

    if not num_question:
        st.stop()

    question_type = st.selectbox(
        "Ch·ªçn lo·∫°i c√¢u h·ªèi:",
        ("Tr·∫Øc nghi·ªám", "ƒê√∫ng/Sai", "ƒêi·ªÅn t·ª´ v√†o ch·ªó tr·ªëng"),
        index=None
        )

    if not question_type:
        st.stop()

    difficulty = st.selectbox(
        "Ch·ªçn m·ª©c ƒë·ªô kh√≥:",
        ("D·ªÖ", "Trung b√¨nh", "Kh√≥"),
        index=None
        )

    if not difficulty:
        st.stop()
    

    prompt = f"T·ª´ t·ªáp ƒë·∫ßu v√†o, t·∫°o b√†i ki·ªÉm tra v·ªõi {num_question} c√¢u h·ªèi lo·∫°i {question_type} v·ªõi m·ª©c ƒë·ªô {difficulty}."

    prompt = prompt + " Cu·ªëi b√†i ki·ªÉm tra, th√™m m·ªôt ph·∫ßn m·ªõi ƒë·ªÉ cung c·∫•p c√¢u tr·∫£ l·ªùi ƒë√∫ng v√† gi·∫£i th√≠ch chi ti·∫øt cho m·ªói c√¢u h·ªèi. Tr√≠ch d·∫´n s·ªë trang trong t·ªáp cho m·ªói c√¢u h·ªèi v√† tr√≠ch d·∫´n vƒÉn b·∫£n, n·ªôi dung li√™n quan."
    # st.markdown(prompt)

    model_ai = st.selectbox(
        "Ch·ªçn model:",
        ("gpt-4o-mini", "gpt-3.5-turbo"),
        index=None
    )

    if not model_ai:
        st.stop()

    # st.markdown(prompt)

    if st.button("T·∫°o b√†i ki·ªÉm tra"):
        print(prompt)
        request_gpt(uploaded_file, prompt, "test", model_ai)